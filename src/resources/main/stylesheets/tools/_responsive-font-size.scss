@charset "UTF-8";

/// Output each font size for the given variant for each viewport.
///
/// @param { Arglist } $size
///     Defined font-sizes by name: default, 'h1', 'meta' etc.

@mixin responsive-font-size($sizes...)
{
    $font-sizes-length: length($font-sizes);
    $sizes-length: length($sizes);

    /// Return a warning when the length of the given $sizes is higher then we have within $sizes
    @if $sizes-length > $font-sizes-length
    {

        @warn warning('Wrong number of arguments (#{$sizes-length} for #{$font-sizes-length}), the last #{($sizes-length - $font-sizes-length)} will be ignored.');
    }

    /// Compare the given sizes with the global sizes and append the last given argument as fallback
    $missing-font-sizes: $font-sizes-length - $sizes-length;
    @if $missing-font-sizes > 0
    {
        @for $i from 1 through $missing-font-sizes
        {
            $sizes: append($sizes, nth($sizes, length($sizes)), comma);
        }
    }

    /// Check if each given $size is present within $font-sizes
    $defined-sizes: ();
    $i: 0;

    @each $size in $sizes
    {
        /// Set the default value to check if we have found our $font-size value;
        $font-size-found: false;

        /// Prevent adding extra values if the length of $responsive_font_sizes is smaller than the givin $font_sizes
        @if $i < length($font-sizes)
        {
            /// Compare if the current font size is present within our default font sizes
            @each $variant in map-keys(map-get($font-sizes, 'smartphone'))
            {
                @if $variant == $size
                {
                    $font-size-found: true;
                    $defined-sizes: append($defined-sizes, $size, comma);
                }
            }

            /// Use 'default-font-size' as our fallback if our given size is not present within the default values
            @if $font-size-found == false
            {
                $defined-sizes: append($defined-sizes, 'default', comma);
            }
        }
    }

    /// Store each defined $font-size for the next iteration so we can skip the current value if the last value is the same.
    $previous-font-size: 0;
    $i: 1;

    /// Output each size for each viewport we have defined within the $font-sizes list
    @each $font-size in $font-sizes
    {
        /// Get our breakpoint keyname.
        $specific-breakpoint: nth(map-keys($font-sizes), $i);

        /// Set the font size for the current breakpoint.
        $specific-font-size: map-get(map-get($font-sizes, $specific-breakpoint), nth($defined-sizes, $i));

        /// Don't output a font-size if have no valid font-size and breakpoint specified.
        @if $specific-breakpoint != null and $specific-font-size != null
        {
            /// Only output the font-size if the current value isn't the same as $previous-font-size.
            @if $specific-font-size != $previous-font-size
            {
                @include breakpoint(
                    $min-width: viewport($specific-breakpoint, 'min-width')
                ) {
                    font-size: $specific-font-size;
                }
            }

            /// Set our specific font size so we can compare it for our next font size
            $previous-font-size: $specific-font-size;
        }

        $i: $i + 1;
    }
}