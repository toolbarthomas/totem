@charset "UTF-8";

/// Returns the correct font-size property for smartphone, tablet & desktop breakpoints.
/// Define any font size values directly within the mixin.
///
/// @param {Font size (Arglist)} $sizes
///     One or multiple sizes to use for each breakpoint
///
/// @return font-size: $font-size;

@mixin responsive-font-size($sizes...)
{
    /// Convert $sizes to a sass list so we can loop trough it
    @if length($sizes) == 0
    {
        $sizes: append($sizes, 'default-font-size', comma);
    }

    /// Set our default font sizes so can loop trough them
    $default_sizes: (
        'display1-font-size',
        'display2-font-size',
        'display3-font-size',
        'h1-font-size',
        'h2-font-size',
        'h3-font-size',
        'h4-font-size',
        'h5-font-size',
        'h6-font-size',
        'lead-font-size',
        'default-font-size',
        'meta-font-size',
        'small-font-size',
        'tiny-font-size'
    );

    $responsive_font_sizes : (
        0 : (
            breakpoint: viewport(smartphone),
            sizes: (
                'display1-font-size':           3.6rem,
                'display2-font-size':           3.2rem,
                'display3-font-size':           2.8rem,
                'h1-font-size':                 2.6rem,
                'h2-font-size':                 2.4rem,
                'h3-font-size':                 2.1rem,
                'h4-font-size':                 1.9rem,
                'h5-font-size':                 1.7rem,
                'h6-font-size':                 1.4rem,
                'lead-font-size':               1.7rem,
                'default-font-size':            1.4rem,
                'meta-font-size':               1.2rem,
                'small-font-size':              1.2rem,
                'tiny-font-size':               1.2rem
            )
        ),
        1 : (
            breakpoint: viewport(tablet),
            sizes: (
                'display1-font-size':           4.1rem,
                'display2-font-size':           3.4rem,
                'display3-font-size':           3.1rem,
                'h1-font-size':                 2.7rem,
                'h2-font-size':                 2.4rem,
                'h3-font-size':                 2.2rem,
                'h4-font-size':                 2.0rem,
                'h5-font-size':                 1.8rem,
                'h6-font-size':                 1.6rem,
                'lead-font-size':               1.8rem,
                'default-font-size':            1.6rem,
                'meta-font-size':               1.4rem,
                'small-font-size':              1.2rem,
                'tiny-font-size':               1.1rem
            )
        ),
        2 : (
            breakpoint: viewport(desktop),
            sizes: (
                'display1-font-size':           4.8rem,
                'display2-font-size':           3.9rem,
                'display3-font-size':           3.5rem,
                'h1-font-size':                 3.2rem,
                'h2-font-size':                 2.7rem,
                'h3-font-size':                 2.4rem,
                'h4-font-size':                 2.1rem,
                'h5-font-size':                 1.8rem,
                'h6-font-size':                 1.6rem,
                'lead-font-size':               1.8rem,
                'default-font-size':            1.6rem,
                'meta-font-size':               1.4rem,
                'small-font-size':              1.2rem,
                'tiny-font-size':               1.1rem
            )
        )
    );

    /// Return a warning when the length of the given font_sizes is higher then our responsive_font_sizes options
    @if length($sizes) > length($responsive_font_sizes)
    {
        @warn 'Wrong number of arguments (' + length($sizes) + ' for ' + length($responsive_font_sizes) + '), the last ' + (length($sizes) - length($responsive_font_sizes)) + ' will be ignored.';
    }

    /// Get the length of the $missing_sizes based from the responsive_font_sizes
    $missing_sizes: length($responsive_font_sizes) - length($sizes);
    @for $i from 0 through $missing_sizes
    {
        $sizes: append($sizes, nth($sizes, 1), comma);
    }

    /// Setup our output
    $output_sizes: ();

    /// Setup an index so we only define font sizes that haven't been used
    $index: 0;

    @each $size in $sizes {
        /// Prevent adding extra values if the length of $responsive_font_sizes is smaller than the givin $font_sizes
        @if $index < length($responsive_font_sizes)
        {
            $found: false;

            /// Check if $size has a value that's present within $default_sizes
            @each $default_size in $default_sizes
            {
                @if $default_size == $size
                {
                    $found: true;
                    $output_sizes: append($output_sizes, $size, comma);
                }
            }

            /// If we haven't found our value then we'll fallback to default-font-size;
            @if $found == false
            {
                $output_sizes: append($output_sizes, 'default-font-size', comma);
            }
        }

        $index: $index + 1;
    }

    //Set our previous font size so we can have a valid comparison
    $previous_font_size: 0;

    //Loop trough all $respponsive_font_sizes list and output the size if the current value isn't used
    @for $i from 0 through length($responsive_font_sizes) - 1
    {
        //Get our font current font size.
        $font_size: map-get(map-get(map-get($responsive_font_sizes, $i), 'sizes'), nth($output_sizes, $i+1));

        //Define our breakpoint based on the given font-size.
        $breakpoint: map-get(map-get($responsive_font_sizes, $i), 'breakpoint');

        //Check if $font_size and $breakpoint have been declared
        @if $font_size != null and $breakpoint != null
        {
            //Only output the font-size if the current value isn't the same as the previous_font_size.
            @if $font_size != $previous_font_size
            {
                @include breakpoint($breakpoint)
                {
                    font-size: $font_size;
                }
            }

            //Update our previous font size so we can compare the upcomming value with it
            $previous_font-size: $font-size;
        }
    }
}